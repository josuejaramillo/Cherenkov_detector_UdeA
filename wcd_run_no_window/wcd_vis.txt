#include "G4RunManager.hh"
#include "G4UImanager.hh"
#include "PhysicsList.hh"
#include "DetectorConstruction.hh"
#include "Randomize.hh"
#include "ActionInitialization.hh"
#include "G4VisExecutive.hh"
#include "G4UIExecutive.hh"
#include <string>
#include <cstdlib>  // Para std::atoi

int main(int argc, char** argv)
{
    int N = 1000;
    std::string nombreArchivoBase = "output.root";
    long seed = 12345;

    // Procesar los argumentos de la línea de comandos
    for (int i = 1; i < argc; i++) {
        if (std::string(argv[i]) == "-N" && i + 1 < argc) {
            N = std::atoi(argv[i + 1]);
            i++;
        } else if (std::string(argv[i]) == "-output" && i + 1 < argc) {
            nombreArchivoBase = argv[i + 1];
            i++;
        } else if (std::string(argv[i]) == "-seed" && i + 1 < argc) {
            seed = std::stol(argv[i + 1]);
            i++;
        }
    }

    std::string nombreArchivoSalida = "./rootFiles/" + nombreArchivoBase + "_" + std::to_string(seed);

    // Inicializa la interfaz gráfica si es necesario
    G4UIExecutive* ui = nullptr;
    if (argc == 1 || std::string(argv[1]) == "-N") {
        ui = new G4UIExecutive(argc, argv);
    }

    // Configura la semilla de números aleatorios
    G4Random::setTheEngine(new CLHEP::RanecuEngine);
    G4Random::setTheSeed(seed);

    // Inicializa el RunManager
    G4RunManager* runManager = new G4RunManager;
    runManager->SetUserInitialization(new DetectorConstruction());
    runManager->SetUserInitialization(new PhysicsList());
    runManager->SetUserInitialization(new ActionInitialization(nombreArchivoSalida));

    // Inicializa el sistema de visualización
    G4VisManager* visManager = new G4VisExecutive;
    visManager->Initialize();

    // Inicializa Geant4
    runManager->Initialize();

    // Obtén el manejador de la interfaz de usuario
    G4UImanager* UImanager = G4UImanager::GetUIpointer();

    if (!ui) {
        // Modo batch: ejecuta la simulación sin interfaz gráfica
        G4String command = "/run/beamOn " + std::to_string(N);
        UImanager->ApplyCommand(command);
    } else {
        // Modo interactivo: ejecuta con interfaz gráfica
        UImanager->ApplyCommand("/control/execute init_vis.mac");
        ui->SessionStart();
        delete ui;
    }

    // Finaliza y libera memoria
    delete visManager;
    delete runManager;

    return 0;
}
